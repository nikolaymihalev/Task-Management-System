@model TaskInfoModel

<div class="container-fluid">
    <div class="row">
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4" style="margin-top: 2em;">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1>@Model.Title</h1>
            </div>
            <div class="task-infomodel-container">
                <div class="task-st-pr-parent">
                    <div class="task-st-pr-container">
                        <p>Status: <span>@Model.Status</span></p>
                        <p>Priority: <span>@Model.Priority</span></p>
                    </div>
                    <div>
                        <a class="task-st-pr-update" asp-action="Update" asp-controller="User" asp-route-id="@Model.Id"><i class="fa-solid fa-pen" style="color: #000000;"></i></a>
                    </div>
                </div>                
                <p class="task-infomodel-desc">@Model.Description</p>
                <div class="task-dates-container">
                    <p>Due Date: @Model.DueTime</p>
                    <p>Completed: @Model.CompletedTime</p>
                </div>
                <div class="task-buttons">
                    <a class="update-btn" asp-action="Edit" asp-controller="User" asp-route-id="@Model.Id">Edit</a>
                    <a class="delete-btn" asp-action="Remove" asp-controller="User" asp-route-id="@Model.Id">Remove</a>
                </div>
            </div>            
        </main>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/site.js"></script>
    <script>
        changeSidebarActiveButton(1);
    </script>
    <script>
        var taskStatusPriorityEl = document.querySelector('.task-st-pr-container').childNodes;

        taskStatusPriorityEl.forEach((node) => {
            if (node.firstChild !== null) {
                if (node.firstChild.textContent === 'Status: ') {
                    switch (node.firstElementChild.textContent) {
                        case 'ToDo':
                            node.firstElementChild.style.backgroundColor = '#ffc163'
                            node.firstElementChild.style.color = "#ff9b03";
                            break;
                        case 'InProgress':
                            node.firstElementChild.style.backgroundColor = '#fff48f'
                            node.firstElementChild.style.color = "#ffe600";
                            break;
                        case 'Completed':
                            node.firstElementChild.style.backgroundColor = '#a1ffa4'
                            node.firstElementChild.style.color = "#21ff28";
                            break;
                    }
                } else if (node.firstChild.textContent === 'Priority: ') {
                    switch (node.firstElementChild.textContent) {
                        case 'Low':
                            node.firstElementChild.style.backgroundColor = '#61ff6b'
                            node.firstElementChild.style.color = "#07d900";
                            break;
                        case 'Medium':
                            node.firstElementChild.style.backgroundColor = '#7ad1ff'
                            node.firstElementChild.style.color = "#1E90FF";
                            break;
                        case 'High':
                            node.firstElementChild.style.backgroundColor = '#ff8a97'
                            node.firstElementChild.style.color = "#ff0000";
                            break;
                    }
                }
            }
        })
    </script>
}