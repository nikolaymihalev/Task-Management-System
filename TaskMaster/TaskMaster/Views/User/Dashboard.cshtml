@model StatisticsModel

<div class="container-fluid">
    <div class="row">
        <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4" style="margin-top: 2em;">
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1>Dashboard</h1>
            </div>
            <div class="dashboard-content">
                <div>
                    <p>Task Completion Breakdown</p>
                    <canvas id="taskCompletionChart" width="200" height="200"></canvas>
                </div>

                <div>
                    <p>Task Deadline Completion</p>
                    <canvas id="taskDeadlineChart" width="200" height="200"></canvas>
                </div>

                <div>
                    <p>Overdue Tasks</p>
                    <canvas id="overdueTasksChart" width="200" height="200"></canvas>
                </div>                
            </div>
            <div class="dashboard-content">
                <div>
                    <p>Tasks by Status</p>
                    <canvas id="tasksByStatusChart" width="250" height="250"></canvas>
                </div>

                <div>
                    <p>Tasks by Priority</p>
                    <canvas id="tasksByPriorityChart" width="250" height="250"></canvas>
                </div>
            </div>

            <div class="dashboard-content">
                <div>
                    <p>Tasks completed this year</p>
                    <canvas id="tasksCompletdThisYear" width="400" height="400"></canvas>
                </div>

                <div>
                    <p>Tasks for all time</p>
                    <canvas id="tasksAllTime" width="400" height="400"></canvas>
                </div>
            </div>
        </main>
    </div>
</div>

<script src="~/js/site.js"></script>

<script>
    changeSidebarActiveButton(0);

    var stats = @Html.Raw(Json.Serialize(Model));

    var ctx1 = document.getElementById('taskCompletionChart').getContext('2d');
    var taskCompletionChart = new Chart(ctx1, {
        type: 'pie',
        data: {
            labels: ['Completed Tasks', 'Pending Tasks'],
            datasets: [{
                data: [stats.completedTasksCount, stats.pendingTasksCount],
                backgroundColor: ['#07d900', '#ff0000']
            }]
        },
        options: {
            responsive: true,
        }
    });

    // Task Deadline Completion
    var ctx2 = document.getElementById('taskDeadlineChart').getContext('2d');
    var taskDeadlineChart = new Chart(ctx2, {
        type: 'pie',
        data: {
            labels: ['Completed Before Deadline', 'Completed After Deadline'],
            datasets: [{
                data: [stats.tasksCompletedBeforeDeadline, stats.tasksCompletedAfterDeadline],
                backgroundColor: ['#1E90FF', '#f3ff17']
            }]
        },
        options: {
            responsive: true,
        }
    });

    // Overdue Tasks Pie Chart
    var ctx3 = document.getElementById('overdueTasksChart').getContext('2d');
    var overdueTasksChart = new Chart(ctx3, {
        type: 'pie',
        data: {
            labels: ['Overdue Tasks', 'Completed Tasks'],
            datasets: [{
                data: [stats.overdueTasksCount, stats.completedTasksCount],
                backgroundColor: ['#ffaa00', '#07d900']
            }]
        },
        options: {
            responsive: true,
        }
    });

    // Tasks by Priority Bar Chart
    var ctx4 = document.getElementById('tasksByPriorityChart').getContext('2d');
    var tasksByPriority = @Html.Raw(Json.Serialize(Model.TasksByPriority));

    var priorityLabels = Object.keys(tasksByPriority);
    var priorityData = Object.values(tasksByPriority);

    var tasksByPriorityChart = new Chart(ctx4, {
        type: 'bar',
        data: {
            labels: priorityLabels,
            datasets: [{
                data: priorityData,
                backgroundColor: ['#07d900', '#1E90FF', '#ff0000']
            }]
        },
        options: {
            plugins: {
                legend: {
                    display: false 
                }
            }
        }
    });

    // Tasks by Status Bar Chart
    var ctx5 = document.getElementById('tasksByStatusChart').getContext('2d');
    var tasksByStatus = @Html.Raw(Json.Serialize(Model.TasksByStatus));

    var statusLabels = Object.keys(tasksByStatus);
    var statusData = Object.values(tasksByStatus);

    var tasksByStatusChart = new Chart(ctx5, {
        type: 'bar',
        data: {
            labels: statusLabels,
            datasets: [{
                data: statusData,
                backgroundColor: ['#ffaa00', '#f3ff17', '#07d900']
            }]
        },
        options: {
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });

    // Tasks completed this year
    var ctx6 = document.getElementById('tasksCompletdThisYear').getContext('2d');
    var tasksCompletedThisYear = @Html.Raw(Json.Serialize(Model.TasksCompletedThisYear));

    var tCTYLabels = Object.keys(tasksCompletedThisYear);
    var tCTYData = Object.values(tasksCompletedThisYear);

    var tasksCompletedThisChart = new Chart(ctx6, {
        type: 'line',
        data: {
            labels: tCTYLabels,
            datasets: [{
                data: tCTYData,
                backgroundColor: '#1E90FF',
                borderColor: '#1E90FF'
            }]
        },
        options: {
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });

    // Tasks all time
    var ctx7 = document.getElementById('tasksAllTime').getContext('2d');
    var tasksForAllTime = @Html.Raw(Json.Serialize(Model.TasksAllTime));

    var tasksAllTimeLabels = Object.keys(tasksForAllTime);
    var tasksAllTimeData = Object.values(tasksForAllTime);

    var tasksAllTimeChart = new Chart(ctx7, {
        type: 'line',
        data: {
            labels: tasksAllTimeLabels,
            datasets: [{
                data: tasksAllTimeData,
                backgroundColor: '#ff0000',
                borderColor: '#ff0000'
            }]
        },
        options: {
            plugins: {
                legend: {
                    display: false
                }
            }
        }
    });
</script>